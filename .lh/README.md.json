{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1643623703761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643706636947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n ```bash\r\n sudo apt install neovim # 安装 neovim\r\n ```\r\n \r\n-将插件以及配置下载到 `~/.vim/` 目录中，这个目录是存放所有插件和配置的地方。vimscript是vim自己的一套脚本语言，通过这种脚本语言可以实现与 vim 交互，达到功能扩展的目的。一组 vimscript 就是一个 vim 插件，vim 的很多功能都由各式插件实现。\r\n+将插件以及配置下载到 `~/.config/.nvim/` 目录中，这个目录是存放所有插件和配置的地方。vimscript是vim自己的一套脚本语言，通过这种脚本语言可以实现与 vim 交互，达到功能扩展的目的。一组 vimscript 就是一个 vim 插件，vim 的很多功能都由各式插件实现。\r\n \r\n ```shell\r\n $ git clone https://gitee.com/yin_haoyu/nvim.git ~/.config/nvim\r\n # 插件管理器\r\n"
                }
            ],
            "date": 1643623703761,
            "name": "Commit-0",
            "content": "<p align=\"center\">Only tested on Windows11 wsl</p>\r\n\r\n# 目录\r\n\r\n- [目录](#目录)\r\n  - [安装](#安装)\r\n  - [快捷键](#快捷键)\r\n  - [插件管理器](#插件管理器)\r\n  - [理解Vim](#理解vim)\r\n  - [菜单目录](#菜单目录)\r\n  - [HTML操作](#html操作)\r\n  - [代码导航](#代码导航)\r\n  - [文本内容搜索](#文本内容搜索)\r\n  - [文件搜索](#文件搜索)\r\n  - [插件列表](#插件列表)\r\n  - [参考资料](#参考资料)\r\n  - [其它人的vimrc配置](#其它人的vimrc配置)\r\n\r\n## 安装\r\n\r\n最新版本的Neovim 使用下面命令安装 Neovim 版本并更新：\r\n\r\n```bash\r\nsudo apt install neovim # 安装 neovim\r\n```\r\n\r\n将插件以及配置下载到 `~/.vim/` 目录中，这个目录是存放所有插件和配置的地方。vimscript是vim自己的一套脚本语言，通过这种脚本语言可以实现与 vim 交互，达到功能扩展的目的。一组 vimscript 就是一个 vim 插件，vim 的很多功能都由各式插件实现。\r\n\r\n```shell\r\n$ git clone https://gitee.com/yin_haoyu/nvim.git ~/.config/nvim\r\n# 插件管理器\r\ncurl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\r\n# 安装主题\r\ncurl -LSso ~/.vim/colors/molokai.vim https://raw.githubusercontent.com/fatih/molokai/master/colors/molokai.vim\r\n```\r\n\r\n## 快捷键\r\n\r\n```bash\r\nU # 选中 - 变大写 \r\nu # 选中 - 变小写\r\n~ # 选中 - 变大写变小写，小写变大写\r\n##########\r\n\\        # 启动搜索文件(需要下载fzf)\r\n<ctrl+l> # 启动搜索行\r\n<ctrl+h> # 启动搜索历史文件\r\n;tt      # 开启/关闭代码导航\r\n;fl      # 开启/关闭目录菜单\r\n:!which ls  # 找命令不推出vim运行命令\r\n```\r\n\r\n**整页翻页**\r\n\r\n```bash\r\nctrl-f # 下一页 f 就是`forword` \r\nctrl-d # 下半页 d \r\nctrl-b # 上一页 b 就是`backward`  \r\nctrl-u # 上半页 u  \r\n```\r\n\r\n**保存退出**\r\n\r\n```bash\r\n:w new_filename     # → 保存为指定文件  \r\n:w   # → 保存修改  \r\n:wq  # → 保存修改并推出  \r\nZZ   # → 快捷键，保存修改并推出  \r\n:q!  # → 不保存修改推出  \r\n:wq! # → 保存修改并推出（文件所有者，root权限的用户）  \r\n```\r\n\r\n**文本编辑搜索等操作**\r\n\r\n```bash\r\nxp  # 左右交换光标处两字符的位置\r\n:200,320 join # 合并第200~320行\r\nJ  # 选中多行合并\r\n\r\n:r ~/git/R.js # 将文件内容导入到该文件中\r\n:r !date    # 将当前编辑时间导入当前文本光标所在行\r\n:!date      # 查看编辑时间\r\n\r\n;sp # 选中搜索 - 文本中选中关键字\r\n    # normal模式下 选中搜索 - 文本中选中关键字\r\n;sl # 选中搜索 - 结果列表\r\n\r\n;y  # 复制到剪切板\r\ny   # 复制\r\nyy  # 复制当前行\r\nnyy # n表示大于1的数字，复制n行\r\nyw  # 从光标处复制至一个单子/单词的末尾，包括空格\r\nye  # 从光标处复制至一个单子/单词的末尾，不包括空格\r\ny$  # 从当前光标复制到行末\r\ny0  # 从当前光标位置（不包括光标位置）复制之行首\r\ny3l # 从光标位置（包括光标位置）向右复制3个字符\r\ny5G # 将当前行（包括当前行）至第5行（不包括它）复制\r\ny3B # 从当前光标位置（不包括光标位置）反向复制3个单词\r\n.   # 粘贴\r\np   # 粘贴\r\n\r\n# 多光标编辑\r\nShift+n # 选中下一个相同字符\r\nShift+k # 跳过当前选中的字符\r\n\r\n:1,24s/header/www/g  # 第1到24行将header替换成www\r\n```\r\n\r\n**刷新重载打开的文件**\r\n\r\n```bash\r\n:e  # 刷新当前文件\r\n:e! # 强制刷新当前文件\r\n```\r\n\r\n**简单排版**\r\n\r\n```vimscript\r\n:ce(nter)  # 居中显示光标所在行\r\n:ri(ght)   # 靠右显示光标所在行\r\n:le(ft)    # 靠左显示光标所在行\r\nJ          # 将光标所在下一行合并到光标所在行\r\n\r\n>>         # 光标所在行增加缩进(一个tab)\r\n<<         # 光标所在行减少缩进(一个tab)\r\n\r\nn>>        # 光标所在行开始的n行增加缩进\r\nn<<        # 光标所在行开始的n行减少缩进\r\n```\r\n\r\n## 插件管理器\r\n\r\n插件管理器换成了 [Pathogen](https://github.com/tpope/vim-pathogen) 看上去比其它插件管理器更简单的样子，安装插件只需将插件放入 `bundle` 目录，在 `~/.vimrc` 配置即可。\r\n\r\n## 理解Vim\r\n\r\n这部分来源 [一起来说 Vim 语](http://www.jianshu.com/p/a361ce8c97bc)，理解此部分是需要你已经了解了 Vim 的几种常用的工作模式（正常模式、插入模式、命令模式等）\r\n\r\n<details>\r\n<summary>动词理解</summary>\r\n\r\n动词代表了我们打算对文本进行什么样的操作。例如：\r\n\r\n```bash\r\nd # 表示删除delete\r\nr # 表示替换replace\r\nc # 表示修改change\r\ny # 表示复制yank\r\nv # 表示选取visual select\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>名词理解</summary>\r\n\r\n名词代表了我们即将处理的文本。Vim 中有一个专门的术语叫做 [文本对象] text object，下面是一些文本对象的示例：\r\n\r\n```bash\r\nw # 表示一个单词word\r\ns # 表示一个句子sentence\r\np # 表示一个段落paragraph\r\nt # 表示一个 HTML 标签tag\r\n引号或者各种括号所包含的文本称作一个文本块。\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>介词理解</summary>\r\n\r\n介词界定了待编辑文本的范围或者位置。\r\n\r\n```bash\r\ni # 表示在...之内 inside\r\na # 表示环绕... around\r\nt # 表示到...位置前 to\r\nf # 表示到...位置上 forward\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>数词理解</summary>\r\n\r\n数词指定了待编辑文本对象的数量，从这个角度而言，数词也可以看作是一种介词。引入数词之后，文本编辑命令的语法就升级成了下面这样：\r\n\r\n```\r\n动词 介词/数词 名词\r\n```\r\n\r\n下面是几个例子：\r\n\r\n```bash\r\nc3w  # 修改三个单词：change three words\r\nd2w  # 删除两个单词：delete two words\r\n```\r\n\r\n另外，数词也可以修饰动词，表示将操作执行 n 次。于是，我们又有了下面的语法：\r\n\r\n```\r\n数词 动词 名词\r\n```\r\n\r\n请看示例：\r\n\r\n```bash\r\n2dw # 两次删除单词（等价于删除两个单词）: twice delete word\r\n3x  # 三次删除字符（等价于删除三个字符）：three times delete character\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>组词为句理解</summary>\r\n\r\n有了这些基本的语言元素，我们就可以着手构造一些简单的命令了。文本编辑命令的基本语法如下：\r\n\r\n```\r\n动词 介词 名词\r\n```\r\n\r\n下面是一些例子（如果熟悉了上面的概念，你将会看到这些例子非常容易理解），请亲自在 Vim 中试验一番。\r\n\r\n```bash\r\ndip # 删除一个段落: delete inside paragraph\r\nvis # 选取一个句子: visual select inside sentence\r\nciw # 修改一个单词: change inside word\r\ncaw # 修改一个单词: change around word\r\ndtx # 删除文本直到字符“x”（不包括字符“x”）: delete to x\r\ndfx # 删除文本直到字符“x”（包括字符“x”）: delete forward x\r\n```\r\n\r\n</details>\r\n\r\n\r\n## 菜单目录\r\n\r\n工程文件菜单插件 [scrooloose/nerdtree](https://github.com/scrooloose/nerdtree) \r\n\r\n```bash\r\nctrl + i # 菜单显示隐藏文件\r\n;fl      # 显示文件菜单 file list\r\n# 可以直接在Tab之间切换。\r\ngt # 后一个Tab标签\r\ngT # 前一个Tab标签\r\n```\r\n\r\n```bash\r\nma # 新建文件，新建目录，文件目录 'folder/' 记住后面的斜杠\r\n```\r\n\r\n```bash\r\nshift+i      # 显示/隐藏隐藏文件 \r\nt       # 在新 Tab 中打开选中文件/书签，并跳到新 Tab\r\nT       # 在新 Tab 中打开选中文件/书签，但不跳到新 Tab\r\ni       # split 一个新窗口打开选中文件，并跳到该窗口\r\ngi      # split 一个新窗口打开选中文件，但不跳到该窗口\r\ns       # vsplit 一个新窗口打开选中文件，并跳到该窗口\r\ngs      # vsplit 一个新 窗口打开选中文件，但不跳到该窗口\r\n\r\nctrl + w + h    # 光标 focus 左侧树形目录\r\nctrl + w + l    # 光标 focus 右侧文件显示窗口\r\nctrl + w + w    # 光标自动在左右侧窗口切换\r\nctrl + w + r    # 移动当前窗口的布局位置\r\no       # 在已有窗口中打开文件、目录或书签，并跳到该窗口\r\ngo      # 在已有窗口 中打开文件、目录或书签，但不跳到该窗口\r\n\r\n!       # 执行当前文件\r\nO       # 递归打开选中 结点下的所有目录\r\nx       # 合拢选中结点的父目录\r\nX       # 递归 合拢选中结点下的所有目录，收起当前目录树\r\ne       # Edit the current dif\r\n\r\n双击    相当于 NERDTree-o\r\n中键    对文件相当于 NERDTree-i，对目录相当于 NERDTree-e\r\n\r\nD       # 删除当前书签\r\n#\r\nP       # 跳到根结点\r\np       # 跳到父结点\r\nK       # 跳到当前目录下同级的第一个结点\r\nJ       # 跳到当前目录下同级的最后一个结点\r\nk       # 跳到当前目录下同级的前一个结点\r\nj       # 跳到当前目录下同级的后一个结点\r\n\r\nC       # 将选中目录或选中文件的父目录设为根结点\r\nu       # 将当前根结点的父目录设为根目录，并变成合拢原根结点\r\nU       # 将当前根结点的父目录设为根目录，但保持展开原根结点\r\nr       # 递归刷新选中目录，刷新当前目录\r\nR       # 递归刷新根结点，刷新根目录树\r\nm       # 显示文件系统菜单\r\ncd      # 将 CWD 设为选中目录\r\n\r\nI       # 切换是否显示隐藏文件\r\nf       # 切换是否使用文件过滤器\r\nF       # 切换是否显示文件\r\nB       # 切换是否显示书签\r\n#\r\nq       # 关闭 NerdTree 窗口\r\n?       # 切换是否显示 Quick Help\r\n```\r\n\r\n## HTML操作\r\n\r\n便捷操作得益于插件[Emmet.vim](https://github.com/mattn/emmet-vim)。键入 `div>p#foo$*3>a` 然后按快捷键 `<c-y>,` – 表示 `<Ctrl-y>` 后再按逗号【<kbd>Ctrl</kbd><kbd>y</kbd><kbd>,</kbd>】。\r\n\r\n新建 `vim index.html` 文件，输入 `html:5_` 使用快捷键 <kbd>Ctrl</kbd><kbd>y</kbd><kbd>,</kbd>，即可初始化一个 HTML 文件。\r\n\r\n按大写的 `V` 进入 Vim 可视模式，行选取上面三行内容，然后按键 <kbd>Ctrl</kbd>+<kbd>y</kbd>+<kbd>,</kbd>，这时 Vim 的命令行会提示 `Tags:`，键入 `ul>li*`，然后按 `Enter`。\r\n\r\n```shell\r\n<ctrl+y>d # 根据光标位置选中整个标签  \r\n<ctrl+y>D # 根据光标位置选中整个标签内容  \r\n<ctrl-y>n # 跳转到下一个编辑点  \r\n<ctrl-y>N # 跳转到上一个编辑点  \r\n<ctrl-y>i # 更新图片大小  \r\n<ctrl-y>m # 合并成一行  \r\n<ctrl-y>k # 移除标签对  \r\n<ctrl-y>j # 分割/合并标签  \r\n<ctrl-y>/ # 切换注释  \r\n<ctrl-y>a # 从 URL 地址生成锚  \r\n<ctrl-y>A # 从 URL 地址生成引用文本  \r\n```\r\n\r\n## 代码导航\r\n\r\n通过 [majutsushi/tagbar](https://github.com/majutsushi/tagbar) 插件实现，Vim 的类代码地图查看器，通过 `:TagbarToggle` 来查看。\r\n\r\n```bash\r\n;tt # 开启/关闭导航\r\n```\r\n\r\n## 文本内容搜索\r\n\r\n通过 [easymotion/vim-easymotion](https://github.com/easymotion/vim-easymotion) 插件可以丰富搜索\r\n\r\n```bash\r\n;f  # 启动搜索输入字母，出现位置选择\r\n;e  # 下一页随机位置\r\n;b  # 上一页随机位置\r\n;n  # 下一页随机位置\r\n```\r\n\r\n基本搜索，这种搜索不需要依赖任何插件，输入 <kbd>/</kbd> 再输入需要搜索的内容，摁 <kbd>Enter</kbd> 键，将会高亮所有搜索的内容，在英文状态下摁 <kbd>n</kbd> 字母键向下查找，下次打开文件时，这些字符串仍然高亮显示，使用命令`:nohl`取消高亮显示。\r\n\r\n`/pattern<Enter>`：向下查找pattern匹配字符串   \r\n`?pattern<Enter>`：向上查找pattern匹配字符串，使用了查找命令之后，使用如下两个键快速查找：  \r\n`n`：按照同一方向继续查找   \r\n`N`：按照反方向查找   \r\n\r\n```shell\r\n/^abc<Enter>       # 查找以abc开始的行 \r\n/test$<Enter>      # 查找以abc结束的行 \r\n//^test<Enter>     # 查找^tabc字符串\r\n:s/vivian/sky/     # 替换当前行第一个 vivian 为 sky\r\n:s/vivian/sky/g    # 替换当前行所有 vivian 为 sky\r\n:n,$s/vivian/sky/  # 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky\r\n:n,$s/vivian/sky/g # 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky\r\n                   #（n 为数字，若 n 为 .，表示从当前行开始到最后一行）\r\n:%s/vivian/sky/  #（等同于 :g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky\r\n:%s/vivian/sky/g #（等同于 :g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky\r\n\r\n:s#vivian/#sky/#      # 替换当前行第一个 vivian/ 为 sky/\r\n:%s+/oradata/apras/+/user01/apras1+ \r\n#（使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/\r\n\r\n:s/str1/str2/          # 用字符串 str2 替换行中首次出现的字符串 str1\r\n:s/str1/str2/g         # 用字符串 str2 替换行中所有出现的字符串 str1\r\n:.,$ s/str1/str2/g     # 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1\r\n:1,$ s/str1/str2/g     # 用字符串 str2 替换正文中所有出现的字符串 str1\r\n:g/str1/s//str2/g      # 功能同上\r\n\r\n//<abc  # 查找以test开始的字符串 \r\n/abc/>  # 查找以test结束的字符串 \r\n\r\n$       # 匹配一行的结束\r\n^       # 匹配一行的开始\r\n/<      # 匹配一个单词的开始，例如//<abc<Enter>:查找以abc开始的字符串\r\n/>      # 匹配一个单词的结束，例如/abc/><Enter>:查找以abc结束的字符串 \r\n\r\n*       # 匹配0或多次\r\n/+      # 匹配1或多次\r\n/=      # 匹配0或1次\r\n\r\n.       # 匹配除换行符以外任意字符    \r\n/a      # 匹配一个字符\r\n/d      # 匹配任一数字      \r\n/u      # 匹配任一大写字母\r\n\r\n[]      # 匹配范围，如t[abcd]s 匹配tas tbs tcs tds\r\n/{}     # 重复次数，如a/{3,5} 匹配3~5个a\r\n/( /)   # 定义重复组，如a/(xy/)b 匹配ab axyb axyxyb axyxyxyb ...\r\n/|      # 或，如：for/|bar 表示匹配for或者bar\r\n\r\n/%20c   # 匹配第20列\r\n/%20l   # 匹配第20行\r\n\r\n# 切换 向上和向下搜索\r\n# 输入 / 摁 Enter键，再摁 n 字母键向，下查找\r\n# 输入 ? 摁 Enter键，再摁 n 字母键向，上查找\r\n```\r\n\r\n上面是全文搜索，下面是简单的单行搜索\r\n\r\n```shell\r\nfx  # 到第一个x\r\n2fx # 到第二个x\r\nFx  # 往回查找\r\n```\r\n\r\nvim搜索时默认是大小写敏感的，要想实现大小写不敏感的搜索，如果仅仅是对当前打开的文件设置就用`:set ignorecase`，而永久性的设置可以到vimrc配置文件中添加一行\r\n\r\n```vim\r\nset ignorecase\r\n```\r\n\r\n## 文件搜索\r\n\r\n搜索文件有多个插件 [junegunn/fzf.vim](https://github.com/junegunn/fzf.vim)、[Yggdroot/LeaderF](https://github.com/Yggdroot/LeaderF)、[wincent/command-t](https://github.com/wincent/command-t) 和 [kien/ctrlp.vim](https://github.com/kien/ctrlp.vim)，这里使用的 [Ctrlp](https://github.com/kien/ctrlp.vim) 使用 <kbd>Ctrl</kbd><kbd>p</kbd> 启动文件搜索。\r\n\r\n```bash\r\n<ctrl+p> # 启动搜索\r\n```\r\n\r\n## 插件列表\r\n\r\n这里面所有的插件，并不是都放到了我的 [.vimrc](./.vimrc) 文件中 .vimrc 配置文件中，是我个人喜欢并且习惯的配置。\r\n\r\n<details>\r\n<summary>插件管理工具</summary>\r\n\r\n- [junegunn/vim-plug](https://github.com/junegunn/vim-plug)\r\n- [VundleVim/Vundle.vim](https://github.com/VundleVim/Vundle.vim)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>主题风格</summary>\r\n\r\n- [vim-colors-solarized](https://github.com/altercation/vim-colors-solarized) 主题风格素雅 solarized\r\n- [molokai](https://github.com/tomasr/molokai) 主题风格多彩 molokai\r\n- [phd](https://github.com/vim-scripts/phd) 主题风格复古 phd\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>使用界面</summary>\r\n\r\n- [Mango](https://github.com/goatslacker/mango.vim) A nice color scheme\r\n- [VimAirline](https://github.com/bling/vim-airline) 美化状态栏偏好设置\r\n- [vim-powerline](https://github.com/Lokaltog/vim-powerline) 美化状态栏\r\n- [vim-airline](https://github.com/vim-airline/vim-airline) 美化状态栏和配置\r\n- [vim-airline-themes](https://github.com/vim-airline/vim-airline-themes) airline主题\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>管理项目</summary>\r\n\r\n- [NERDTree](https://github.com/scrooloose/nerdtree) Manage your project files\r\n- [VimFugitive](https://github.com/tpope/vim-fugitive) Git 集成\r\n- [VimGitGutter](https://github.com/airblade/vim-gitgutter) Git 集成，强烈推荐！\r\n- [EditorconfigVim](https://github.com/editorconfig/editorconfig-vim) Shared coding conventions\r\n- [command-t](https://github.com/wincent/command-t) 文件搜索\r\n- [vim-signature](https://github.com/kshenoy/vim-signature) 书签可视化的插件\r\n- [BOOKMARKS--Mark-and-Highlight-Full-Lines](https://github.com/vim-scripts/BOOKMARKS--Mark-and-Highlight-Full-Lines) 它可以让书签行高亮\r\n- [tagbar](https://github.com/majutsushi/tagbar) 方法地图导航\r\n- [indexer.tar.gz](https://github.com/vim-scripts/indexer.tar.gz) 自动生成标签并引入\r\n  - [DfrankUtil](https://github.com/vim-scripts/DfrankUtil) 上面插件，依赖这个插件\r\n  - [vimprj](https://github.com/vim-scripts/vimprj) 上面插件，依赖这个插件\r\n- [ctrlsf.vim](https://github.com/dyng/ctrlsf.vim) 上下文插件，例如搜素到关键字，中间缩略，展示一段上下文\r\n- [vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors) 多光标编辑功能\r\n- [gen_tags.vim](https://github.com/jsfaint/gen_tags.vim) 生成，加载，更新ctags/gtags文件。\r\n- [ybian/smartim](https://github.com/ybian/smartim) 解决中文输入法下面无法使用命令\r\n- [Yggdroot/LeaderF](https://github.com/Yggdroot/LeaderF) 模糊查找神器，性能超越ctrlp\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>代码书写</summary>\r\n\r\n- [NERDCommenter](https://github.com/scrooloose/nerdcommenter) 注释更容易\r\n- [DrawIt](https://github.com/vim-scripts/DrawIt) ASCII art 风格的注释\r\n- [VimTrailingWhitespace](https://github.com/bronson/vim-trailing-whitespace) 突出尾随空格\r\n- [Syntastic](https://github.com/scrooloose/syntastic) 语法检查\r\n- [VimEasyAlign](https://github.com/junegunn/vim-easy-align) 调整部分代码\r\n- [VimMultipleCursors](https://github.com/terryma/vim-multiple-cursors) Write on multiple lines easily\r\n- [VimJsBeautify](https://github.com/maksimr/vim-jsbeautify) Reformat JavaScript, HTML and JSON files\r\n- [VimYankStack](https://github.com/maxbrunsfeld/vim-yankstack) Iterate over yanked stack on paste\r\n- [VimSurround](https://github.com/tpope/vim-surround) Quoting and parenthesizing\r\n- [YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 键而全的、支持模糊搜索的、高速补全的插件\r\n- [VimForTern](https://github.com/marijnh/tern_for_vim) Smart JavaScript autocompletion\r\n- [VimNode](https://github.com/moll/vim-node) Navigate through node.js code/modules\r\n- [VimLint](https://github.com/syngan/vim-vimlint) Linter used by syntastic for VimL\r\n- [VimLParser](https://github.com/ynkdir/vim-vimlparser) VimL parser (required by VimLint)\r\n- [emmet-vim](https://github.com/mattn/emmet-vim) 提高HTML和CSS的工作流\r\n- [vim-cpp-enhanced-highlight](https://github.com/octol/vim-cpp-enhanced-highlight) C++ 语法高亮支持\r\n- [vim-indent-guides](https://github.com/nathanaelkane/vim-indent-guides) 相同缩进的代码关联起来\r\n- [vim-fswitch](https://github.com/derekwyatt/vim-fswitch) 接口文件（MyClass.h）与实现文件（MyClass.cpp）快捷切换的插件\r\n- [MiniBufExplorer](https://github.com/fholgado/minibufexpl.vim) 显示多个 buffer 对应的 window\r\n- [wildfire.vim](https://github.com/gcmt/wildfire.vim) 快捷键选中 `<>`、`[]`、`{}` 中间的内容\r\n- [gundo.vim](https://github.com/sjl/gundo.vim) 让你有机会撤销最近一步或多步操作\r\n- [vim-easymotion](https://github.com/Lokaltog/vim-easymotion) 快速移动，两次 `<leader>` 作为前缀键\r\n- [Shougo/neocomplete.vim](https://github.com/Shougo/neocomplete.vim) 强大的自动补全插件\r\n- [vim-instant-markdown](https://github.com/suan/vim-instant-markdown) 编辑 markdown 文档，自动开启 firefox 为你显示 markdown 最终效果\r\n- [fcitx.vim](https://github.com/lilydjwg/fcitx.vim) 中/英输入平滑切换\r\n- [othree/xml.vim](https://github.com/othree/xml.vim) 中/提供快速编写xml/html的能力，如标签自动闭合等\r\n- [pangloss/vim-javascript](https://github.com/pangloss/vim-javascript) 提供js代码的智能缩进，仅使用了他的indent功能\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>代码阅读</summary>\r\n\r\n- 语法高亮\r\n  - [vim-polyglot](https://github.com/sheerun/vim-polyglot) 支持常见的语法高亮\r\n  - [VimJson](https://github.com/elzr/vim-json) JSON 高亮和隐藏引号\r\n  - [vim-jsx](https://github.com/mxw/vim-jsx) JSX语法高亮\r\n  - [vim-jsx-typescript](https://github.com/peitalin/vim-jsx-typescript) TSX 语法高亮\r\n  - [YaJS](https://github.com/othree/yajs.vim) JavaScript 语法 (ES5 and ES6)\r\n  - [vim-css3-syntax](https://github.com/hail2u/vim-css3-syntax) CSS3 高亮，包括stylus,Less,Sass\r\n  - [vim-css-color](https://github.com/skammer/vim-css-color) css高亮颜色\r\n  - [gko/vim-coloresque](https://github.com/gko/vim-coloresque) css高亮颜色\r\n  - [ScssSyntax](https://github.com/cakebaker/scss-syntax.vim) SCSS syntax\r\n  - [HTML5](https://github.com/othree/html5.vim) HTML5 syntax\r\n  - [Stylus](https://github.com/wavded/vim-stylus) Stylus 代码高亮\r\n- [JavaScriptLibrariesSyntax](https://github.com/othree/javascript-libraries-syntax.vim) 语法高亮的知名的JS库\r\n- [ultisnips](https://github.com/SirVer/ultisnips) 模板补全插件\r\n- [vim-protodef](https://github.com/derekwyatt/vim-protodef) 根据类声明自动生成类实现的代码框架\r\n\r\n</details>\r\n\r\n## 参考资料\r\n\r\n- [vim 大冒险：在游戏中学习 vim](http://vim-adventures.com/)\r\n- [一起来说 Vim 语](http://www.jianshu.com/p/a361ce8c97bc)\r\n- [css-color stopped working after updating Vim to 7.4](https://github.com/ap/vim-css-color/issues/29)\r\n- [我的VIM配置及说明【K-VIM】](http://www.wklken.me/posts/2013/06/11/linux-my-vim.html)\r\n- [简明 VIM 练级攻略](http://coolshell.cn/articles/5426.html)\r\n- [Vi中的正则表达式](http://tech.idv2.com/2008/07/08/vim-regexp/)\r\n- [vi替换字符串（zz）](http://blog.csdn.net/aldenphy/article/details/4019486)\r\n\r\n## 其它人的vimrc配置\r\n\r\n- [luofei614/vim-plug](https://github.com/luofei614/vim-plug/blob/master/.vimrc)\r\n- [yangyangwithgnu/use_vim_as_ide](https://github.com/yangyangwithgnu/use_vim_as_ide/blob/master/.vimrc)\r\n- [fingertap/vimrc](https://github.com/fingertap/vimrc/blob/master/.vimrc)\r\n- [barretlee/autoconfig-mac-vimrc](https://github.com/barretlee/autoconfig-mac-vimrc/blob/master/.vimrc)\r\n"
        }
    ]
}